//@include calc('minus', height, 100, '%', 5, px, 100%);@mixin calc($condition, $do, $firstVal, $firstValUnit, $secondVal, $secondValUnit, $fallout) {    #{$do} : $fallout;    @if ($condition == 'minus') {        #{$do} : -webkit-calc(#{$firstVal}#{$firstValUnit} - #{$secondVal}#{$secondValUnit});        #{$do} : -moz-calc(#{$firstVal}#{$firstValUnit} - #{$secondVal}#{$secondValUnit});        #{$do} : -o-calc(#{$firstVal}#{$firstValUnit} - #{$secondVal}#{$secondValUnit});        #{$do} : calc(#{$firstVal}#{$firstValUnit} - #{$secondVal}#{$secondValUnit});    }    @else{        #{$do} : -webkit-calc(#{$firstVal}#{$firstValUnit} + #{$secondVal}#{$secondValUnit});        #{$do} : -moz-calc(#{$firstVal}#{$firstValUnit} + #{$secondVal}#{$secondValUnit});        #{$do} : -o-calc(#{$firstVal}#{$firstValUnit} + #{$secondVal}#{$secondValUnit});        #{$do} : calc(#{$firstVal}#{$firstValUnit} + #{$secondVal}#{$secondValUnit});    }}@mixin borderRadius($radius) {	-webkit-border-radius: $radius;	-moz-border-radius: $radius;	border-radius: $radius;}@mixin borderRadiusTopRight($radius) {	-webkit-border-top-right-radius: $radius;	-moz-border-radius-topright: $radius;	border-top-right-radius: $radius;}@mixin borderRadiusTopLeft($radius) {	-webkit-border-top-left-radius: $radius;	-moz-border-radius-topleft: $radius;	border-top-left-radius: $radius;}@mixin borderRadiusBottomRight($radius) {	-webkit-border-bottom-right-radius: $radius;	-moz-border-radius-bottomright: $radius;	border-bottom-right-radius: $radius;}@mixin borderRadiusBottomLeft($radius) {	-webkit-border-bottom-left-radius: $radius;	-moz-border-radius-bottomleft: $radius;	border-bottom-left-radius: $radius;}@mixin textShadow($x, $y, $blur, $color) {	-webkit-text-shadow: $x $y $blur $color;    -moz-text-shadow: $x $y $blur $color;    text-shadow: $x $y $blur $color;}@mixin boxShadow($x, $y, $blur, $color) {	-webkit-box-shadow: $x $y $blur $color;	-moz-box-shadow: $x $y $blur $color;	box-shadow: $x $y $blur $color;}@mixin boxShadowInset($x, $y, $blur, $color) {	-webkit-box-shadow: inset $x $y $blur $color;	-moz-box-shadow: inset $x $y $blur $color;	box-shadow: inset $x $y $blur $color;}//@include multi-shadow(0 5px 5px rgba(0,0,0,0.75), 0 0 130px rgba(251,247,194,0.5));@mixin boxShadowMulti($shadows...) {	-webkit-box-shadow: $shadows;	-moz-box-shadow: $shadows;	box-shadow: $shadows;}//@include backgroundGradient(#fff, #000);@mixin backgroundGradient($from, $to) {    background: {        color: $to;        image: -moz-linear-gradient($from, $to);        image: -o-linear-gradient($from, $to);        image: -webkit-linear-gradient($from, $to);        image: -ms-linear-gradient($from, $to);        image: linear-gradient($from, $to);    }    filter:progid:DXImageTransform.Microsoft.gradient(GradientType=0,startColorstr="#{$from}",endColorstr="#{$to}");}@mixin backgroundGradientLeft($from, $to){    background: {        color: $to;        image: -moz-linear-gradient(left, #{$from} 0%,  #{$to} 100%);        image: -o-linear-gradient(left, #{$from} 0%, #{$to} 100%);        //image: -webkit-gradient(left top, right top, color-stop(0%, #{$from}), color-stop(100%, #{$to}));        image: -webkit-linear-gradient(left, #{$from} 0%, #{$to} 100%);        image: -ms-linear-gradient(left, #{$from} 0%, #{$to} 100%);        image: linear-gradient(to right, #{$from} 0%, #{$to} 100%);    }    filter:progid:DXImageTransform.Microsoft.gradient(GradientType=1,startColorstr="#{$from}",endColorstr="#{$to}");}@mixin backgroundSize($value...) {	-webkit-background-size: $value;	-moz-background-size: $value;	background-size: $value;}@mixin animation($animation...) {	-webkit-animation: $animation;    -moz-animation: $animation;    animation: $animation;}//@include opacity(100);@mixin opacity($percent) {	opacity: ($percent/100);    filter: alpha(opacity=$percent);}@mixin blur($blur) {    filter: blur($blur);    -webkit-filter: blur($blur);    -moz-filter: blur($blur);    -o-filter: blur($blur);    -ms-filter: blur($blur);    filter: url("data:image/svg+xml;utf9,<svg%20version='1.1'%20xmlns='http://www.w3.org/2000/svg'><filter%20id='blur'><feGaussianBlur%20stdDeviation='3'%20/></filter></svg>#blur");    filter:progid:DXImageTransform.Microsoft.Blur(PixelRadius='3'); }@mixin transform($transforms) {    -moz-transform: $transforms;    -o-transform: $transforms;    -ms-transform: $transforms;    -webkit-transform: $transforms;    transform: $transforms;}// scale//@include scale(1.1);@mixin scale($scale) {	@include transform(scale($scale));} // rotate//@include rotate(15deg);@mixin rotate($rotate) {	@include transform(rotate($rotate));} //transition//@include transition(background-color 1s .5s ease-in);@mixin transition($transition...) {    -moz-transition:    $transition;    -o-transition:      $transition;    -webkit-transition: $transition;    transition:         $transition;}@mixin transitionProperty($property...) {    -moz-transition-property:    $property;    -o-transition-property:      $property;    -webkit-transition-property: $property;    transition-property:         $property;}@mixin transitionDuration($duration...) {    -moz-transition-property:    $duration;    -o-transition-property:      $duration;    -webkit-transition-property: $duration;    transition-property:         $duration;}@mixin transitionTimingFunction($timing...) {    -moz-transition-timing-function:    $timing;    -o-transition-timing-function:      $timing;    -webkit-transition-timing-function: $timing;    transition-timing-function:         $timing;}@mixin transitionDelay($delay...) {    -moz-transition-delay:    $delay;    -o-transition-delay:      $delay;    -webkit-transition-delay: $delay;    transition-delay:         $delay;}@mixin responsive($width) {    @if ( $width == small-screens ) {        @media only screen and (min-width: $WIDTH_SMALL) { @content; }    }    @else if ( $width == small-2-screens ) {        @media only screen and (min-width: $WIDTH_SMALL2){ @content; }    }    @else if ( $width == medium-screens ) {        @media only screen and (min-width: $WIDTH_MEDIUM){ @content; }    }    @else if ( $width == large-screens ) {        @media only screen and (min-width: $WIDTH_LARGE){ @content; }    }    @else if ( $width == portrait ) {        @media only screen and (orientation: portrait){ @content; }    }    @else if ( $width == landscape ) {        @media only screen and (orientation: landscape){ @content; }    }    @else if ( $width == small-retina ) {        @media only screen and (-webkit-min-device-pixel-ratio: 2) { @content; }    }    @else if ( $width == medium-retina ) {        @media only screen and (-webkit-min-device-pixel-ratio: 2) and (min-width: $WIDTH_MEDIUM) { @content; }    }}@mixin keyframe ($animation_name) {    @-webkit-keyframes $animation_name {        @content;    }    @-moz-keyframes $animation_name {        @content;    }    @-o-keyframes $animation_name {        @content;    }    @keyframes $animation_name {        @content;    }}// @include animation(10s, 5s, changecolour)@mixin animation ($delay, $duration, $animation) {    -webkit-animation-delay: $delay;    -webkit-animation-duration: $duration;    -webkit-animation-name: $animation;    -webkit-animation-fill-mode: forwards;  // this prevents the animation from restarting!     -moz-animation-delay: $delay;    -moz-animation-duration: $duration;    -moz-animation-name: $animation;    -moz-animation-fill-mode: forwards; // this prevents the animation from restarting!     -o-animation-delay: $delay;    -o-animation-duration: $duration;    -o-animation-name: $animation;    -o-animation-fill-mode: forwards; // this prevents the animation from restarting!     animation-delay: $delay;    animation-duration: $duration;    animation-name: $animation;    animation-fill-mode: forwards; // this prevents the animation from restarting! }@mixin flexbox() {    display: -webkit-box;      // 2009 - Chrome, Safari , iOS Safari    display: -moz-box;         // 2009 - Firefox    display: -ms-flexbox;      // early 2012 - IE 10    display: -webkit-flex;     // 2012 - Chrome    display: flex;             // 2012 - Opera 12.1, Firefox 22+}@mixin flexOrder($order) {    -webkit-box-ordinal-group: $order;   // 2009 - Chrome, Safari , iOS Safari    -moz-box-ordinal-group: $order;      // 2009 - Firefox    -ms-flex-order: $order;              // early 2012 - IE 10    -webkit-order: $order;               // 2012 - Chrome    order: $order;                       // 2012 - Opera 12.1, Firefox 22+}